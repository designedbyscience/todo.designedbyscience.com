// Generated by CoffeeScript 1.3.3
(function() {
  /* Modernizr 2.5.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-touch-teststyles-prefixes
 */
;window.Modernizr=function(a,b,c){function v(a){i.cssText=a}function w(a,b){return v(l.join(a+";")+(b||""))}function x(a,b){return typeof a===b}function y(a,b){return!!~(""+a).indexOf(b)}function z(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:x(f,"function")?f.bind(d||b):f}return!1}var d="2.5.3",e={},f=b.documentElement,g="modernizr",h=b.createElement(g),i=h.style,j,k={}.toString,l=" -webkit- -moz- -o- -ms- ".split(" "),m={},n={},o={},p=[],q=p.slice,r,s=function(a,c,d,e){var h,i,j,k=b.createElement("div"),l=b.body,m=l?l:b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:g+(d+1),k.appendChild(j);return h=["&#173;","<style>",a,"</style>"].join(""),k.id=g,(l?k:m).innerHTML+=h,m.appendChild(k),l||(m.style.background="",f.appendChild(m)),i=c(k,a),l?k.parentNode.removeChild(k):m.parentNode.removeChild(m),!!i},t={}.hasOwnProperty,u;!x(t,"undefined")&&!x(t.call,"undefined")?u=function(a,b){return t.call(a,b)}:u=function(a,b){return b in a&&x(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=q.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(q.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(q.call(arguments)))};return e});var A=function(c,d){var f=c.join(""),g=d.length;s(f,function(c,d){var f=b.styleSheets[b.styleSheets.length-1],h=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"",i=c.childNodes,j={};while(g--)j[i[g].id]=i[g];e.touch="ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch||(j.touch&&j.touch.offsetTop)===9},g,d)}([,["@media (",l.join("touch-enabled),("),g,")","{#touch{top:9px;position:absolute}}"].join("")],[,"touch"]);m.touch=function(){return e.touch};for(var B in m)u(m,B)&&(r=B.toLowerCase(),e[r]=m[B](),p.push((e[r]?"":"no-")+r));return v(""),h=j=null,e._version=d,e._prefixes=l,e.testStyles=s,e}(this,this.document);;

  var activeInput, addFocusListener, addProcessingSpinner, addTask, addTaskListClickListener, addTouchClickEventListener, animateSpinner, clearActiveInput, completeTask, handleEnterKey, handleInputFocus, handleTaskListClick, input, myconsole, outputToConsole, removeProcessingSpinner, setCurrentDay, setDisabled, setTaskFocus, uncompleteTask, updatePageTitle, _i, _j, _len, _len1, _ref, _ref1;

  addTouchClickEventListener = function(element, func) {
    if (Modernizr.touch) {
      return element.addEventListener("touchend", func, false);
    } else {
      return element.addEventListener("click", func, false);
    }
  };

  updatePageTitle = function(up) {
    var taskcount, _ref, _ref1;
    if (up) {
      setTaskCount(1);
    } else {
      setTaskCount(-1);
    }
    taskcount = getTaskCount();
    if (taskcount > 1) {
      document.title = taskcount + " tasks :: todo.designedbyscience.com";
      return (_ref = window.fluid) != null ? _ref.dockBadge = taskcount + "" : void 0;
    } else {
      document.title = taskcount + " task :: todo.designedbyscience.com";
      return (_ref1 = window.fluid) != null ? _ref1.dockBadge = taskcount + "" : void 0;
    }
  };

  animateSpinner = function() {
    var frames, i;
    i = 0;
    frames = ["/", "|", "\\", "-"];
    return setInterval(function() {
      document.getElementById("spinner").innerHTML = frames[i];
      return i = i < 3 ? i + 1 : 0;
    }, 100);
  };

  setTaskFocus = function() {
    return document.querySelector(".task_entry").focus();
  };

  activeInput = document.querySelector(".task_entry");

  handleInputFocus = function(e) {
    return activeInput = e.target;
  };

  addFocusListener = function(o) {
    return o.addEventListener("focus", handleInputFocus, false);
  };

  clearActiveInput = function() {
    return activeInput.value = "";
  };

  addProcessingSpinner = function(element) {
    var spinner;
    spinner = document.createElement("div");
    spinner.innerHTML = "~";
    spinner.classList.add("processspinner");
    return element.appendChild(spinner);
  };

  removeProcessingSpinner = function(element) {
    var spinner;
    spinner = element.querySelector(".processspinner");
    element.removeChild(spinner);
    return element.classList.remove("processing");
  };

  setDisabled = function(tl) {
    return tl.classList.add("disabled");
  };

  setCurrentDay = function() {
    var i, tasklist, tasklists, today, _i, _len, _ref, _results;
    today = new Date();
    activeInput = document.querySelectorAll(".task_entry")[today.getDay()];
    activeInput.focus();
    tasklists = document.querySelectorAll(".day");
    _ref = document.querySelectorAll(".day");
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      tasklist = _ref[i];
      if (!(i < today.getDay())) {
        continue;
      }
      console.log(i);
      _results.push(setDisabled(tasklist));
    }
    return _results;
  };

  addTask = function(object, list) {
    var newtask;
    outputToConsole("Sending task...");
    newtask = list.querySelector(".empty");
    if (!newtask) {
      newtask = document.createElement("div");
      newtask.classList.add("task");
      list.appendChild(newtask);
    }
    newtask.classList.add("processing");
    newtask.classList.remove("empty");
    newtask.innerHTML = object.task_text;
    addProcessingSpinner(newtask);
    clearActiveInput();
    updatePageTitle(true);
    $.ajax({
      url: "/todo/",
      type: "POST",
      data: object,
      success: function(data, textStatus, jqXHR) {
        var json;
        json = $.parseJSON(data);
        outputToConsole("task added");
        newtask.setAttribute("data-id", json.id);
        return removeProcessingSpinner(newtask);
      }
    });
    return true;
  };

  completeTask = function(task) {
    var id;
    task.classList.add("completed");
    id = task.getAttribute("data-id");
    updatePageTitle(false);
    return $.ajax({
      url: "/todo/" + id,
      type: "POST",
      success: function(data, textStatus, jqXHR) {
        return outputToConsole("task completed");
      }
    });
  };

  uncompleteTask = function(task) {
    var id;
    task.classList.remove("completed");
    id = task.getAttribute("data-id");
    return $.ajax({
      url: "/todo/" + id,
      type: "POST",
      success: function(data, textStatus, jqXHR) {
        return outputToConsole("task uncompleted");
      }
    });
  };

  handleTaskListClick = function(e) {
    if (e.target.classList.contains("task") && !e.target.classList.contains("empty")) {
      if (e.target.classList.contains("completed")) {
        return uncompleteTask(e.target);
      } else {
        return completeTask(e.target);
      }
    }
  };

  addTaskListClickListener = function(o) {
    return addTouchClickEventListener(o, handleTaskListClick);
  };

  handleEnterKey = function(e) {
    var task, task_date, task_object;
    if (e.keyCode === 13) {
      task = activeInput.value;
      task_date = activeInput.getAttribute("data-date");
      task_object = {
        task_text: task,
        due_date: task_date
      };
      return addTask(task_object, activeInput.parentNode);
    }
  };

  myconsole = document.querySelector(".console");

  outputToConsole = function(message) {
    var newconsoleline;
    newconsoleline = document.createElement("p");
    newconsoleline.innerHTML = message;
    myconsole.appendChild(newconsoleline);
    console.log(message);
    return true;
  };

  setCurrentDay();

  document.addEventListener("keyup", handleEnterKey, false);

  _ref = document.querySelectorAll(".task_entry");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    input = _ref[_i];
    addFocusListener(input);
  }

  _ref1 = document.querySelectorAll(".tasklist");
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    input = _ref1[_j];
    addTaskListClickListener(input);
  }

}).call(this);
